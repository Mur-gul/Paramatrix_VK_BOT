import os
import signal
import requests
import telebot
import time
from datetime import datetime, timedelta

TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN');
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID');
TELEGRAM_THREAD_ID = os.environ.get('TELEGRAM_THREAD_ID');
VK_API_VERSION = os.environ.get('VK_API_VERSION');
VK_ACCESS_TOKEN = os.environ.get('VK_ACCESS_TOKEN');
VK_GROUP_ID = os.environ.get('VK_GROUP_ID');

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –¢—Ä—ç–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
bot_start_time = datetime.now()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Long Poll –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –í–ö –ì—Ä—É–ø–ø—ã
def get_longpoll_server():
    response = requests.get('https://api.vk.com/method/groups.getLongPollServer', params={
        'group_id': VK_GROUP_ID,
        'access_token': VK_ACCESS_TOKEN,
        'v': VK_API_VERSION
    })

    data = response.json()
    if 'response' in data:
        return data['response']
    else:
        print(f"Error fetching Long Poll server info: {data}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á–µ–∫–∞ Long Poll –∏–≤–µ–Ω—Ç–æ–≤ –∏ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º
def check_longpoll(server_info):
    try:
        response = requests.get(server_info['server'], params={
            'act': 'a_check',
            'key': server_info['key'],
            'ts': server_info['ts'],
            'wait': 25  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        })

        data = response.json()
        if 'updates' in data:
            for update in data['updates']:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –∞–ø–¥–µ–π—Ç —ç—Ç–æ –Ω–æ–≤—ã–π –∏–≤–µ–Ω—Ç —Å –ø–æ—Å—Ç–æ–º (wall_post_new)
                if update['type'] == 'wall_post_new':
                    post_id = update['object']['id']
                    send_telegram_message(post_id)
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ server_info 'ts' –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            server_info['ts'] = data['ts']
        else:
            # –•–µ–Ω–¥–ª–µ—Ä –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            handle_failed_response(server_info, data)
    except Exception as e:
        print(f"Exception during Long Poll check: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º —á–∞—Ç –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
def send_telegram_message(post_id):
    try:
        post_link = f"https://vk.com/wall-{VK_GROUP_ID}_{post_id}"
        message = f"üì¢ **–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ!**\n\n[–õ–∞–π–∫–∞—Ç—å –∑–¥–µ—Å—å]({post_link})"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¢–µ–ª–µ–≥—Ä–∞–º–º —á–∞—Ç –∏ —Ç–µ–º—É
        bot.send_message(TELEGRAM_CHAT_ID, message, parse_mode='Markdown', disable_web_page_preview=False, message_thread_id=TELEGRAM_THREAD_ID)
    except Exception as e:
        print(f"Error sending message to Telegram: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å Long Poll
def handle_failed_response(server_info, data):
    if 'failed' in data:
        if data['failed'] == 1:
            # –û—à–∏–±–∫–∞ 1: —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'ts'
            print(f"Outdated 'ts' value, updating: {data}")
            server_info['ts'] = data['ts']
        elif data['failed'] == 2:
            # –û—à–∏–±–∫–∞ 2: —É—Å—Ç–∞—Ä–µ–≤—à–∏–π '–∫–ª—é—á'
            print(f"Expired 'key', fetching new Long Poll server info.")
            new_server_info = get_longpoll_server()
            if new_server_info:
                server_info.update(new_server_info)
        elif data['failed'] == 3:
            # –û—à–∏–±–∫–∞ 3: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'ts', –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π 'ts' —Å —Å–µ—Ä–≤–µ—Ä–∞
            print(f"Invalid 'ts' value, getting new Long Poll server info.")
            new_server_info = get_longpoll_server()
            if new_server_info:
                server_info.update(new_server_info)
        else:
            print(f"Unknown 'failed' error: {data}")

# –ö–æ–º–∞–Ω–¥ —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ø—Ç–∞–π–º–∞ –±–æ—Ç–∞
@bot.message_handler(commands=['uptime'])
def uptime(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
    if message.chat.type not in ["group", "supergroup"]:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—ë
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    uptime_duration = datetime.now() - bot_start_time

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
    days, remainder = divmod(uptime_duration.total_seconds(), 86400)  # 86400 —Å–µ–∫—É–Ω–¥ –≤ –¥–µ–Ω—å
    hours, remainder = divmod(remainder, 3600)  # 3600 —Å–µ–∫—É–Ω–¥ –≤ —á–∞—Å–µ
    minutes, seconds = divmod(remainder, 60)  # 60 —Å–µ–∫—É–Ω–¥ –≤ –º–∏–Ω—É—Ç–µ

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–ø—Ç–∞–π–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    formatted_uptime = f"{int(days)} –¥–Ω–µ–π, {int(hours)} —á–∞—Å–æ–≤, {int(minutes)} –º–∏–Ω—É—Ç, {int(seconds)} —Å–µ–∫—É–Ω–¥"

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–ø—Ç–∞–π–º–µ
        bot.send_message(TELEGRAM_CHAT_ID, f"ü§ñ –Ø —Ä–∞–±–æ—Ç–∞—é —É–∂–µ: {formatted_uptime}",
                     parse_mode='Markdown',
                     disable_web_page_preview=False,
                     message_thread_id=TELEGRAM_THREAD_ID) # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–ø—Ç–∞–π–º–µ: {e}")

should_run = True
def signal_handler(sig, frame):
    should_run = False

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –í–ö –ø–æ—Å—Ç–æ–≤
def start_bot():
    print("Starting...")
    server_info = get_longpoll_server()
    if server_info:
        print(f"Long Poll server info obtained: {server_info}")

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGHUP, signal_handler)
        signal.signal(signal.SIGABRT, signal_handler)

        while should_run:
            check_longpoll(server_info)

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —á—Ä–µ–∑–º–µ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            time.sleep(1)

        print("Finished.")
    else:
        print("Failed to obtain Long Poll server info. Exiting...")

if __name__ == "__main__":
    # –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¢–µ–ª–µ–≥—Ä–∞–º–º –∫–æ–º–∞–Ω–¥—ã
    from threading import Thread
    Thread(target=bot.polling, daemon=True).start()

    # –ù–∞—á–∞–ª–æ –í–ö Long Poll —á–µ–∫–∏–Ω–≥–∞
    start_bot()